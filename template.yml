AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
  ACMCertificateArn:
    Type: String
  Version:
    Type: String

Resources:
  Gateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref ACMCertificateArn

  ErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Join ["/", ["/aws", "lambda", !Ref MainFunction]]
      FilterPattern: '{$.level = "ERROR"}'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub ${AWS::StackName}
          MetricName: ErrorMetricFilter

  EmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: kai.hendry+ltabus@gmail.com

  LogAlarmResource:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ErrorLogs
      AlarmDescription: Alarm when lambda errors
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ErrorMetricFilter
      Namespace: !Sub ${AWS::StackName}
      Threshold: 0.0
      Period: 60
      Statistic: Sum
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref EmailSNSTopic
    DependsOn: EmailSNSTopic

  MainFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ltabus
      Architectures:
        - arm64
      CodeUri: .
      Handler: main
      Runtime: provided.al2
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            ApiId: !Ref Gateway
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          ACCOUNTKEY: "{{resolve:ssm:/ltabus/accountkey:1}}"
          VERSION: !Ref Version
    Metadata:
      BuildMethod: makefile

Outputs:
  GatewayEndPoint:
    Value: !Sub "https://${Gateway}.execute-api.${AWS::Region}.amazonaws.com/"
