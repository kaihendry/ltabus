AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
  ACMCertificateArn:
    Type: String

Resources:
  # Create log group for Access logs
  AccessLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Ref DomainName

  Gateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefaultRouteSettings:
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
        DetailedMetricsEnabled: true
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus"}'
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref ACMCertificateArn

  MainFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      CodeUri: .
      Handler: main
      Runtime: provided.al2
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            ApiId: !Ref Gateway
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          accountkey: '{{resolve:ssm:/ltabus/accountkey:1}}'
    Metadata:
      BuildMethod: makefile

Outputs:
  GatewayEndPoint:
    Value: !Sub "https://${Gateway}.execute-api.${AWS::Region}.amazonaws.com/"
